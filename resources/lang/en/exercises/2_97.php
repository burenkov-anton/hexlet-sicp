<?php

return [
    'title' => "Algorithm as a procedure",
    'description' => [
        '1' =>
        " a. Implement this algorithm as a procedure reduce-terms that takes two term lists n and d as arguments and returns a list nn, " .
        "dd, which are n and d reduced to lowest terms via the algorithm given above. Also write a procedure reduce-poly, " .
        "analogous to add-poly, that checks to see if the two polys have the same variable. If so, reduce-poly strips off the variable and passes the problem to reduce-terms, " .
        "then reattaches the variable to the two term lists supplied by reduce-terms.",
        '2' =>
        "b. Define a procedure analogous to reduce-terms that does what the original make-rat did for integers:",
        '3' =>
        "and define reduce as a generic operation that calls apply-generic to dispatch to either reduce-poly (for polynomial arguments) or reduce-integers (for scheme-number arguments). " .
        "You can now easily make the rational-arithmetic package reduce fractions to lowest terms by having make-rat call reduce before combining the given numerator and denominator to form a rational number. " .
        "The system now handles rational expressions in either integers or polynomials. To test your program, try the example at the beginning of this extended exercise:",
        '4' =>
        "See if you get the correct answer, correctly reduced to lowest terms.",
        '5' =>
        "The GCD computation is at the heart of any system that does operations on rational functions. The algorithm used above, although mathematically straightforward, is extremely slow. " .
        "The slowness is due partly to the large number of division operations and partly to the enormous size of the intermediate coefficients generated by the pseudodivisions. " .
        "One of the active areas in the development of algebraic-manipulation systems is the design of better algorithms for computing polynomial GCDs."
    ]
];
